{"version":3,"sources":["components/Grid.js","../../../src/grid.tsx","../../../src/simple-grid.tsx","data/presentations.js","../../../src/aspect-ratio.tsx","components/PresentationCard.js","pages/Presentations.js"],"names":["Grid","children","width","mx","mb","columns","base","md","lg","spacing","forwardRef","templateColumns","styles","display","gridArea","gridTemplateAreas","gridGap","gridRowGap","gridColumnGap","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","ref","__css","SimpleGrid","count","minChildWidth","mapResponsive","value","isNull","n","isNumber","gap","columnGap","rowGap","presentations","url","title","description","AspectRatio","ratio","className","child","React","_className","cx","position","_before","height","content","paddingBottom","r","overflow","top","right","bottom","left","justifyContent","alignItems","objectFit","PresentationCard","presentation","descriptionTextColor","useColorModeValue","maxH","borderWidth","borderRadius","boxShadow","_hover","transitionDuration","as","cursor","target","href","src","allowFullScreen","px","py","mt","fontWeight","lineHeight","isTruncated","color","fontSize","Presentations","map","index"],"mappings":"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","file":"static/js/4.f4b77275.chunk.js","sourcesContent":["import React from 'react'\nimport { node } from 'prop-types'\nimport { Box, SimpleGrid } from '@chakra-ui/react'\n\nconst Grid = ({ children }) => (\n  <Box width=\"fit-content\" mx=\"auto\" mb=\"25\">\n    <SimpleGrid columns={{ base: 1, md: 2, lg: 3 }} spacing=\"60px\" mx=\"auto\">\n      {children}\n    </SimpleGrid>\n  </Box>\n)\n\nGrid.propTypes = { children: node }\n\nexport default Grid\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { filterUndefined, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { BoxProps } from \"./box\"\n\nexport interface GridProps extends HTMLChakraProps<\"div\">, GridOptions {}\n\n/**\n * React component used to create grid layouts.\n *\n * It renders a `div` with `display: grid` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/docs/layout/grid\n */\nexport const Grid = forwardRef<GridProps, \"div\">((props, ref) => {\n  const {\n    area,\n    templateAreas,\n    gap,\n    rowGap,\n    columnGap,\n    column,\n    row,\n    autoFlow,\n    autoRows,\n    templateRows,\n    autoColumns,\n    templateColumns,\n    ...rest\n  } = props\n\n  const styles = {\n    display: \"grid\",\n    gridArea: area,\n    gridTemplateAreas: templateAreas,\n    gridGap: gap,\n    gridRowGap: rowGap,\n    gridColumnGap: columnGap,\n    gridAutoColumns: autoColumns,\n    gridColumn: column,\n    gridRow: row,\n    gridAutoFlow: autoFlow,\n    gridAutoRows: autoRows,\n    gridTemplateRows: templateRows,\n    gridTemplateColumns: templateColumns,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nif (__DEV__) {\n  Grid.displayName = \"Grid\"\n}\n\nexport interface GridOptions {\n  /**\n   * Short hand prop for `gridTemplateColumns`\n   * @type SystemProps[\"gridTemplateColumns\"]\n   */\n  templateColumns?: SystemProps[\"gridTemplateColumns\"]\n  /**\n   * Short hand prop for `gridGap`\n   * @type SystemProps[\"gridGap\"]\n   */\n  gap?: SystemProps[\"gridGap\"]\n  /**\n   * Short hand prop for `gridRowGap`\n   * @type SystemProps[\"gridRowGap\"]\n   */\n  rowGap?: SystemProps[\"gridRowGap\"]\n  /**\n   * Short hand prop for `gridColumnGap`\n   * @type SystemProps[\"gridColumnGap\"]\n   */\n  columnGap?: SystemProps[\"gridColumnGap\"]\n  /**\n   * Short hand prop for `gridAutoFlow`\n   * @type SystemProps[\"gridAutoFlow\"]\n   */\n  autoFlow?: SystemProps[\"gridAutoFlow\"]\n  /**\n   * Short hand prop for `gridAutoRows`\n   * @type SystemProps[\"gridAutoRows\"]\n   */\n  autoRows?: SystemProps[\"gridAutoRows\"]\n  /**\n   * Short hand prop for `gridAutoColumns`\n   * @type SystemProps[\"gridAutoColumns\"]\n   */\n  autoColumns?: SystemProps[\"gridAutoColumns\"]\n  /**\n   * Short hand prop for `gridTemplateRows`\n   * @type SystemProps[\"gridTemplateRows\"]\n   */\n  templateRows?: SystemProps[\"gridTemplateRows\"]\n  /**\n   * Short hand prop for `gridTemplateAreas`\n   * @type SystemProps[\"gridTemplateAreas\"]\n   */\n  templateAreas?: SystemProps[\"gridTemplateAreas\"]\n  /**\n   * Short hand prop for `gridArea`\n   * @type SystemProps[\"gridArea\"]\n   */\n  area?: SystemProps[\"gridArea\"]\n  /**\n   * Short hand prop for `gridColumn`\n   * @type SystemProps[\"gridColumn\"]\n   */\n  column?: SystemProps[\"gridColumn\"]\n  /**\n   * Short hand prop for `gridRow`\n   * @type SystemProps[\"gridRow\"]\n   */\n  row?: SystemProps[\"gridRow\"]\n}\n\nexport interface GridItemProps extends BoxProps {\n  /**\n   * The number of columns the grid item should `span`.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colSpan?: ResponsiveValue<number | \"auto\">\n  /**\n   * The column number the grid item should start.\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  colEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowStart?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowEnd?: ResponsiveValue<number | \"auto\">\n  /**\n   * @type ResponsiveValue<number | \"auto\">\n   */\n  rowSpan?: ResponsiveValue<number | \"auto\">\n}\n\nfunction spanFn(span?: ResponsiveValue<number | \"auto\">) {\n  return mapResponsive(span, (value) =>\n    value === \"auto\" ? \"auto\" : `span ${value}/span ${value}`,\n  )\n}\n\nexport const GridItem = forwardRef<GridItemProps, \"div\">((props, ref) => {\n  const {\n    colSpan,\n    colStart,\n    colEnd,\n    rowEnd,\n    rowSpan,\n    rowStart,\n    ...rest\n  } = props\n\n  const styles = filterUndefined({\n    gridColumn: spanFn(colSpan),\n    gridRow: spanFn(rowSpan),\n    gridColumnStart: colStart,\n    gridColumnEnd: colEnd,\n    gridRowStart: rowStart,\n    gridRowEnd: rowEnd,\n  })\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n","import { ResponsiveValue, forwardRef } from \"@chakra-ui/system\"\nimport { mapResponsive, isNumber, isNull, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component make that providers a simpler interface, and\n * make its easy to create responsive grid layouts.\n *\n * @see Docs https://chakra-ui.com/docs/layout/simple-grid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">((props, ref) => {\n  const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } = props\n\n  const templateColumns = minChildWidth\n    ? widthToColumns(minChildWidth)\n    : countToColumns(columns)\n\n  return (\n    <Grid\n      ref={ref}\n      gap={spacing}\n      columnGap={spacingX}\n      rowGap={spacingY}\n      templateColumns={templateColumns}\n      {...rest}\n    />\n  )\n})\n\nif (__DEV__) {\n  SimpleGrid.displayName = \"SimpleGrid\"\n}\n\nfunction toPx(n: string | number) {\n  return isNumber(n) ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any) {\n  return mapResponsive(width, (value) =>\n    isNull(value) ? null : `repeat(auto-fit, minmax(${toPx(value)}, 1fr))`,\n  )\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    isNull(value) ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n","const presentations = [\n  {\n    url: 'https://nsdeschenes.github.io/graphql-an-introduction/',\n    title: 'GraphQL an Introduction',\n    description:\n      'A presentation that introduces the audience to the basics of GraphQL.',\n  },\n]\n\nexport default presentations\n","import {\n  chakra,\n  forwardRef,\n  ResponsiveValue,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\ninterface AspectRatioOptions {\n  /**\n   * The aspect ratio of the Box. Common values are:\n   *\n   * `21/9`, `16/9`, `9/16`, `4/3`, `1.85/1`\n   */\n  ratio?: ResponsiveValue<number>\n}\n\nexport interface AspectRatioProps\n  extends HTMLChakraProps<\"div\">,\n    AspectRatioOptions {}\n\n/**\n * React component used to cropping media (videos, images and maps)\n * to a desired aspect ratio.\n *\n * @see Docs https://chakra-ui.com/docs/layout/aspect-ratio\n */\nexport const AspectRatio = forwardRef<AspectRatioProps, \"div\">((props, ref) => {\n  const { ratio = 4 / 3, children, className, ...rest } = props\n\n  // enforce single child\n  const child = React.Children.only(children)\n\n  const _className = cx(\"chakra-aspect-ratio\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      position=\"relative\"\n      className={_className}\n      _before={{\n        height: 0,\n        content: `\"\"`,\n        display: \"block\",\n        paddingBottom: mapResponsive(ratio, (r) => `${(1 / r) * 100}%`),\n      }}\n      __css={{\n        \"& > *:not(style)\": {\n          overflow: \"hidden\",\n          position: \"absolute\",\n          top: \"0\",\n          right: \"0\",\n          bottom: \"0\",\n          left: \"0\",\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          width: \"100%\",\n          height: \"100%\",\n        },\n        \"& > img, & > video\": {\n          objectFit: \"cover\",\n        }\n      }}\n      {...rest}\n    >\n      {child}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  AspectRatio.displayName = \"AspectRatio\"\n}\n","import React from 'react'\nimport { Box, AspectRatio, useColorModeValue } from '@chakra-ui/react'\nimport PropTypes from 'prop-types'\n\nconst PresentationCard = ({ presentation }) => {\n  const descriptionTextColor = useColorModeValue('gray.600', 'gray.400')\n\n  return (\n    <Box\n      maxH=\"lg\"\n      width=\"360px\"\n      borderWidth=\"1px\"\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      boxShadow=\"md\"\n      _hover={{ boxShadow: '2xl', transitionDuration: '0.5s' }}\n      as=\"a\"\n      cursor=\"pointer\"\n      target=\"_blank\"\n      href={presentation.url}\n    >\n      <AspectRatio width=\"358px\" height=\"217px\">\n        <iframe\n          title={presentation.title}\n          src={presentation.url}\n          allowFullScreen=\"false\"\n        />\n      </AspectRatio>\n      <Box px=\"4\" py=\"2\">\n        <Box\n          mt=\"1\"\n          fontWeight=\"semibold\"\n          as=\"h4\"\n          lineHeight=\"tight\"\n          isTruncated\n        >\n          {presentation.title}\n        </Box>\n        <Box color={descriptionTextColor} fontSize=\"sm\">\n          {presentation.description}\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default PresentationCard\n\nPresentationCard.propTypes = {\n  presentation: PropTypes.object,\n}\n","import React from 'react'\n\nimport presentations from '../data/presentations'\nimport ProjectCard from '../components/PresentationCard'\nimport Grid from '../components/Grid'\n\nconst Presentations = () => {\n  return (\n    <Grid>\n      {presentations.map((presentation, index) => (\n        <ProjectCard key={index} presentation={presentation} />\n      ))}\n    </Grid>\n  )\n}\n\nexport default Presentations\n"],"sourceRoot":""}